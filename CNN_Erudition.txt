# part 1: imports
import torch
import torchvision
import matplotlib as mpl

# then it's data import, normalization and investigation
mnist_dataset = torchvision.datasets.MNIST(root='./data',
                train=True, download=True, transform=torchvision.transforms.ToTensor()) #batch=64,

image, label = mnist_dataset[123]

# for weird reasons (why I might as well accept this is boilercode and not try to memorize)
image = image.unsqueeze(0)  # best practice is to define a new tensor

# filters
fgaussian = torch.tensor([[1,2,1],[2,4,2],[1,2,1]], dtype=torch.float32).view(1,1,3,3) / 16
# forgot torch.tensor(, dtype=torch.float32)
fsobelx = torch.tensor([[-1,0,1],[-2,0,2],[-1,0,1]], dtype=torch.float32).view(1,1,3,3)
fsobely = torch.tensor([-1,-2,-1],[0,0,0],[1,2,1]], dtype=torch.float32).view(1,1,3,3)
fsharp = torch.tensor([[0,-1,0],[-1,5,-1],[0,-1,0]], dtype=torch.float32).view(1,1,3,3)

# apply the filters
gaussImage = torch.nn.functional.Conv2d(image, fgaussian, padding=1) # , group=1
xfilImage = torch.nn.functional.Conv2d(image, fsobelx, padding=1)
yfilImage = torch.nn.functional.Conv2d(image, fsobely, padding=1)
sharpImage = torch.nn.functional.Conv2d(image, fsharp, padding=1)

# display the results
def tensor_to_image(tensor):

# define CNN

# train CNN

# evaluate CNN
#and look at it's convolution effect

# repeat the above but with more compute / better parameters
